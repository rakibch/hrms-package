import * as hp from "helper-js";
export declare const instances: Map<Element, ExtendedDND>;
export declare const context: {
    triggerElement: hp.Nullable<HTMLElement>;
    dragElement: hp.Nullable<HTMLElement>;
    internal: boolean;
    dropEffect: "none" | "copy" | "link" | "move";
    preventDefault: boolean;
};
export declare function extendedDND(root: Element, options?: Options): ExtendedDND;
export declare const defaultOptions: {
    ingoreHTMLTags: string[];
    ifPreventDefault(event: DragEvent): boolean;
    beforeDragStart(event: MouseEvent | TouchEvent): void | HTMLElement;
    onDragStart(event: DragEvent): void;
    onDrag(event: DragEvent): void;
    onDragEnter(event: DragEvent): void;
    onDragLeave(event: DragEvent): void;
    onDragOver(event: DragEvent): void;
    onDragEnd(event: DragEvent): void;
    onDrop(event: DragEvent): void;
};
export declare type Point = {
    x: number;
    y: number;
};
export declare type Options = Partial<typeof defaultOptions> & {
    /**
     * custom event, like mouseenter. event belongs to dragenter or dragover
     */
    onEnter?: (event: DragEvent) => void;
    /**
     * custom event, like mouseleave. event belongs to dragenter or dragover
     */
    onLeave?: (event: DragEvent) => void;
};
export declare type ExtendedDND = Required<Options> & {
    root: Element;
    /**
     * For user to pass custom data between multiple instances
     * 用于用户在多个实例间传递自定义数据
     */
    data?: unknown;
    destroy: () => void;
};
export declare function extendedDropZone(el: Element, opt?: {
    onEnter?: (event: DragEvent) => void;
    onLeave?: (event: DragEvent) => void;
    onDragEnter?: (event: DragEvent) => void;
    onDragOver?: (event: DragEvent) => void;
    onDragLeave?: (event: DragEvent) => void;
    onDrop?: (event: DragEvent) => void;
    /**
     * for extendedDND's onEnter and onLeave; 用以实现 extendedDND 的 onEnter 和 onLeave
     */
    onEndBeforeLeave?: (event: MouseEvent | TouchEvent | KeyboardEvent) => void;
}): () => void;
