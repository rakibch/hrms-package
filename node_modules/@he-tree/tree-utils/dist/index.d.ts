export declare const CHILDREN = "children";
/**
 * help to handle tree data. 帮助处理树形数据.
 */
export declare function makeTreeProcessor<T>(data: T[], opt?: Options): {
    data: T[];
    stats: Stat<T>[] | null;
    statsFlat: Stat<T>[] | null;
    _statsMap: Map<T, Stat<T>> | null;
    initialized: boolean;
    init(): void;
    getStat(nodeData: T): Stat<T>;
    has(nodeData: T | Stat<T>): boolean;
    _getPathByStat(stat: Stat<T> | null): any;
    /**
     * call it after a stat's `checked` changed
     * @param stat
     * @returns return false mean ignored
     */
    afterOneCheckChanged(stat: Stat<T>): boolean;
    _ignoreCheckedOnce(stat: Stat<T>): void;
    isVisible(statOrNodeData: T | Stat<T>): boolean;
    /**
     * call it to update all stats' `checked`
     */
    updateCheck(): void;
    getChecked(withDemi?: boolean): Stat<T>[];
    getUnchecked(withDemi?: boolean): Stat<T>[];
    /**
     * open all nodes
     */
    openAll(): void;
    /**
     * close all nodes
     */
    closeAll(): void;
    openNodeAndParents(nodeOrStat: T | Stat<T>): void;
    _calcFlatIndex(parent: Stat<T> | null, index: number): number;
    add(nodeData: T, parent?: Stat<T> | null | undefined, index?: number | null | undefined): void;
    remove(stat: Stat<T>): boolean;
    getSiblings(stat: Stat<T>): Stat<T>[];
    /**
     * The node should not exsit.
     * @param node
     * @param parent
     * @param index
     */
    _setPosition(stat: Stat<T>, parent: Stat<T> | null, index: number): void;
    iterateParent(stat: Stat<T>, opt?: {
        withSelf: boolean;
    } | undefined): Generator<Stat<T>, void, unknown>;
    move(stat: Stat<T>, parent: Stat<T> | null, index: number): boolean;
    /**
     * convert stat and its children to one-dimensional array
     * 转换节点和其后代节点为一维数组
     * @param stat
     * @returns
     */
    _flat(stat: Stat<T>): Stat<T>[];
    /**
     * get count of stat and its all children
     * 统计节点和其后代节点数量
     * @param stat
     */
    _count(stat: Stat<T>): number;
    getData(filter?: ((data: T) => T) | undefined, root?: Stat<T> | undefined): T | T[];
    noInitialization: boolean;
    childrenKey: string;
    defaultOpen: boolean;
    statsHandler: (stats: Stat<any>[]) => Stat<any>[];
    statsFlatHandler: (statsFlat: Stat<any>[]) => Stat<any>[];
    afterSetStat: (stat: Stat<any>, parent: Stat<any> | null, index: number) => void;
    afterRemoveStat: (stat: Stat<any>) => void;
    statHandler: (stat: Stat<any>) => Stat<any>;
};
export declare type TreeProcessor = ReturnType<typeof makeTreeProcessor>;
export declare const defaultOptions: {
    childrenKey: string;
    defaultOpen: boolean;
    statsHandler(stats: Stat<any>[]): Stat<any>[];
    statsFlatHandler(statsFlat: Stat<any>[]): Stat<any>[];
    afterSetStat(stat: Stat<any>, parent: Stat<any> | null, index: number): void;
    afterRemoveStat(stat: Stat<any>): void;
    statHandler(stat: Stat<any>): Stat<any>;
};
export interface Options extends Partial<typeof defaultOptions> {
    /**
     * don't call init. You can call it manually later.
     */
    noInitialization?: boolean;
}
export interface Stat<T> extends ReturnType<typeof statDefault> {
    [x: string]: any;
    data: T;
    open: boolean;
    parent: Stat<T> | null;
    children: Stat<T>[];
    level: number;
}
export declare function statDefault(): {
    isStat: true;
    hidden: boolean;
    checked: boolean | 0;
    draggable: boolean | null;
    droppable: boolean | null;
    style: any;
    class: any;
};
