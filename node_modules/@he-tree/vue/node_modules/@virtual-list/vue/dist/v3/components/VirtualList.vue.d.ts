import { PropType, DefineComponent, ExtractPropTypes, Ref, ComputedRef, ComponentOptionsMixin, PublicProps, ComponentProvideOptions } from 'vue-demi';
declare const cpt: DefineComponent<ExtractPropTypes<{
    items: PropType<any[]>;
    disabled: BooleanConstructor;
    horizontal: BooleanConstructor;
    firstRender: {
        type: NumberConstructor;
        default: number;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    itemKey: {
        type: PropType<"index" | ((item: any, index: number) => any)>;
    };
    itemSize: {
        type: PropType<(item: any, index: number) => number | null | undefined | void>;
    };
    table: BooleanConstructor;
}>, {
    listElRef: Ref<HTMLElement | undefined, HTMLElement | undefined>;
    listInnerRef: Ref<any, any>;
    onscroll: () => void;
    listStyle: ComputedRef<{
        overflow: string;
    } | {
        overflow?: undefined;
    }>;
    listInnerStyle: ComputedRef<{
        display: string;
    }>;
    visibleItemsInfo: ComputedRef<{
        item: any;
        index: number;
    }[] | undefined>;
    getItemKey: (item: any, index: number) => any;
    update: () => Promise<void>;
    sizes: ComputedRef<number[]>;
    positions: ComputedRef<number[]>;
    runtimeSizes: ComputedRef<(number | null)[]>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<{
    items: PropType<any[]>;
    disabled: BooleanConstructor;
    horizontal: BooleanConstructor;
    firstRender: {
        type: NumberConstructor;
        default: number;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    itemKey: {
        type: PropType<"index" | ((item: any, index: number) => any)>;
    };
    itemSize: {
        type: PropType<(item: any, index: number) => number | null | undefined | void>;
    };
    table: BooleanConstructor;
}>> & Readonly<{}>, {
    table: boolean;
    disabled: boolean;
    horizontal: boolean;
    firstRender: number;
    buffer: number;
}, {}, {
    VirtualListTable: DefineComponent<ExtractPropTypes<{
        table: BooleanConstructor;
    }>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<{
        table: BooleanConstructor;
    }>> & Readonly<{}>, {
        table: boolean;
    }, {}, {}, {}, string, ComponentProvideOptions, true, {}, any>;
}, {}, string, ComponentProvideOptions, true, {}, any>;
export default cpt;
export type VtlistType = InstanceType<typeof cpt>;
