import type { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType } from 'vue-demi';
declare const cpt: DefineComponent<{
    items: PropType<any[]>;
    disabled: BooleanConstructor;
    horizontal: BooleanConstructor;
    firstRender: {
        type: NumberConstructor;
        default: number;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    itemKey: {
        type: PropType<"index" | ((item: any, index: number) => any)>;
    };
    itemSize: {
        type: PropType<(item: any, index: number) => number | null | undefined | void>;
    };
    table: BooleanConstructor;
}, {
    listElRef: Ref<HTMLElement | undefined>;
    listInnerRef: Ref<any>;
    onscroll: () => void;
    listStyle: ComputedRef<{
        overflow: string;
    } | {
        overflow?: undefined;
    }>;
    listInnerStyle: ComputedRef<{
        display: string;
    }>;
    visibleItemsInfo: ComputedRef<{
        item: any;
        index: number;
    }[] | undefined>;
    getItemKey: (item: any, index: number) => any;
    update: () => Promise<void>;
    sizes: ComputedRef<number[]>;
    positions: ComputedRef<number[]>;
    runtimeSizes: ComputedRef<(number | null)[]>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    items: PropType<any[]>;
    disabled: BooleanConstructor;
    horizontal: BooleanConstructor;
    firstRender: {
        type: NumberConstructor;
        default: number;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    itemKey: {
        type: PropType<"index" | ((item: any, index: number) => any)>;
    };
    itemSize: {
        type: PropType<(item: any, index: number) => number | null | undefined | void>;
    };
    table: BooleanConstructor;
}>>, {
    table: boolean;
    disabled: boolean;
    horizontal: boolean;
    firstRender: number;
    buffer: number;
}>;
declare const _sfc_main: DefineComponent<{
    items: PropType<any[]>;
    disabled: BooleanConstructor;
    horizontal: BooleanConstructor;
    firstRender: {
        type: NumberConstructor;
        default: number;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    itemKey: {
        type: PropType<"index" | ((item: any, index: number) => any)>;
    };
    itemSize: {
        type: PropType<(item: any, index: number) => number | null | undefined | void>;
    };
    table: BooleanConstructor;
}, {
    listElRef: Ref<HTMLElement | undefined>;
    listInnerRef: Ref<any>;
    onscroll: () => void;
    listStyle: ComputedRef<{
        overflow: string;
    } | {
        overflow?: undefined;
    }>;
    listInnerStyle: ComputedRef<{
        display: string;
    }>;
    visibleItemsInfo: ComputedRef<{
        item: any;
        index: number;
    }[] | undefined>;
    getItemKey: (item: any, index: number) => any;
    update: () => Promise<void>;
    sizes: ComputedRef<number[]>;
    positions: ComputedRef<number[]>;
    runtimeSizes: ComputedRef<(number | null)[]>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    items: PropType<any[]>;
    disabled: BooleanConstructor;
    horizontal: BooleanConstructor;
    firstRender: {
        type: NumberConstructor;
        default: number;
    };
    buffer: {
        type: NumberConstructor;
        default: number;
    };
    itemKey: {
        type: PropType<"index" | ((item: any, index: number) => any)>;
    };
    itemSize: {
        type: PropType<(item: any, index: number) => number | null | undefined | void>;
    };
    table: BooleanConstructor;
}>>, {
    table: boolean;
    disabled: boolean;
    horizontal: boolean;
    firstRender: number;
    buffer: number;
}>;
export declare type VtlistType = InstanceType<typeof cpt>;
export default _sfc_main;
