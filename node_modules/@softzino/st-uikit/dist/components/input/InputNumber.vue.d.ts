import * as heroIcons from "@heroicons/vue/24/solid";
type HeroIconName = keyof typeof heroIcons;
interface Icon {
    iconName: HeroIconName;
    class?: string;
}
declare function __VLS_template(): {
    prepend?(_: {}): any;
    append?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<{
    modelValue: import('vue').PropType<number>;
    readonly: {
        type: globalThis.PropType<boolean>;
        default: boolean;
    };
    type: {
        type: globalThis.PropType<"basic" | "stack">;
        default: string;
    };
    disabled: {
        type: globalThis.PropType<boolean>;
        default: boolean;
    };
    placeholder: {
        type: globalThis.PropType<string>;
        default: string;
    };
    step: {
        type: globalThis.PropType<number>;
        default: number;
    };
    min: {
        type: globalThis.PropType<number>;
        default: number;
    };
    max: {
        type: globalThis.PropType<number>;
        default: number;
    };
    prependIcon: {
        type: globalThis.PropType<Icon>;
    };
    appendIcon: {
        type: globalThis.PropType<Icon>;
    };
    layout: {
        type: globalThis.PropType<"horizontal" | "vertical">;
        default: string;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<{
    modelValue: import('vue').PropType<number>;
    readonly: {
        type: globalThis.PropType<boolean>;
        default: boolean;
    };
    type: {
        type: globalThis.PropType<"basic" | "stack">;
        default: string;
    };
    disabled: {
        type: globalThis.PropType<boolean>;
        default: boolean;
    };
    placeholder: {
        type: globalThis.PropType<string>;
        default: string;
    };
    step: {
        type: globalThis.PropType<number>;
        default: number;
    };
    min: {
        type: globalThis.PropType<number>;
        default: number;
    };
    max: {
        type: globalThis.PropType<number>;
        default: number;
    };
    prependIcon: {
        type: globalThis.PropType<Icon>;
    };
    appendIcon: {
        type: globalThis.PropType<Icon>;
    };
    layout: {
        type: globalThis.PropType<"horizontal" | "vertical">;
        default: string;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    readonly: boolean;
    type: "basic" | "stack";
    disabled: boolean;
    placeholder: string;
    step: number;
    min: number;
    max: number;
    layout: "vertical" | "horizontal";
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
