interface Props {
    size?: "xs" | "sm" | "md" | "lg" | "xl";
    outline?: boolean;
    loading?: boolean;
    prepend?: string | null | undefined;
    append?: string | null | undefined;
    intent?: "primary" | "secondary" | "danger" | "success" | "warning" | "text";
    icon: boolean;
    pill: boolean;
}
declare function __VLS_template(): {
    loading?(_: {}): any;
    prepend?(_: {}): any;
    default?(_: {}): any;
    append?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    size: string;
    outline: boolean;
    loading: boolean;
    prepend: null;
    append: null;
    intent: string;
    icon: boolean;
    pill: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    size: string;
    outline: boolean;
    loading: boolean;
    prepend: null;
    append: null;
    intent: string;
    icon: boolean;
    pill: boolean;
}>>>, {
    icon: boolean;
    size: "xs" | "sm" | "md" | "lg" | "xl";
    outline: boolean;
    loading: boolean;
    prepend: string | null;
    append: string | null;
    intent: "primary" | "secondary" | "danger" | "success" | "warning" | "text";
    pill: boolean;
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
