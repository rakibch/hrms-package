interface Option {
    value: string | number;
    label: string;
}
interface Props {
    modelValue: string | number;
    options: Option[];
    placeholder?: string;
    filterable: boolean;
    clearable: boolean;
    disabled: boolean;
    invalid: boolean;
    placeholderClass: string;
    filterOptionMessage: string;
    showFilterMessage: boolean;
    selectedLabelClass: string;
    optionCardClass: string;
}
declare function __VLS_template(): {
    default?(_: {}): any;
    option?(_: {
        option: Option;
    }): any;
};
declare const __VLS_component: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    options: () => never[];
    placeholder: string;
    filterable: boolean;
    clearable: boolean;
    disabled: boolean;
    invalid: boolean;
    placeholderClass: string;
    showFilterMessage: boolean;
    filterOptionMessage: string;
    selectedLabelClass: string;
    optionCardClass: string;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    onSearch: (...args: any[]) => void;
    clear: (...args: any[]) => void;
    toggleOpen: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    options: () => never[];
    placeholder: string;
    filterable: boolean;
    clearable: boolean;
    disabled: boolean;
    invalid: boolean;
    placeholderClass: string;
    showFilterMessage: boolean;
    filterOptionMessage: string;
    selectedLabelClass: string;
    optionCardClass: string;
}>>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOnSearch?: ((...args: any[]) => any) | undefined;
    onToggleOpen?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    placeholder: string;
    invalid: boolean;
    options: Option[];
    optionCardClass: string;
    showFilterMessage: boolean;
    filterable: boolean;
    clearable: boolean;
    placeholderClass: string;
    filterOptionMessage: string;
    selectedLabelClass: string;
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
