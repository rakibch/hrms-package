interface Option {
    [key: string]: any;
}
declare function __VLS_template(): {
    tag?(_: {
        tags: Option[];
        removeTag: (tag: Option) => void;
    }): any;
    options?(_: {
        filteredOptions: Option[];
        selectOption: (option: Option) => void;
        isSelected: (option: Option) => boolean;
        searchValue: string;
    }): any;
};
declare const __VLS_component: import('vue').DefineComponent<{
    modelValue: import('vue').PropType<Option[]>;
    disabled: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    placeholder: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    invalid: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    options: {
        type: globalThis.PropType<Option[]>;
        required: true;
        default: () => Option[];
    };
    tag: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    createOption: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    searchableOption: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    inlineSearch: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    tagClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    selectedOptionClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    unselectedOptionClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    optionCardClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    optionLabel: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    optionMap: {
        type: globalThis.PropType<(option: Option) => Option>;
        default: (option: Option) => Option;
    };
    filterMessage: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    showFilterMessage: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearableAllTag: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    deselectOptionOnClick: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onSearch: (...args: any[]) => void;
    onCreate: (...args: any[]) => void;
    toggleOpen: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<{
    modelValue: import('vue').PropType<Option[]>;
    disabled: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    placeholder: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    invalid: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    options: {
        type: globalThis.PropType<Option[]>;
        required: true;
        default: () => Option[];
    };
    tag: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    createOption: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    searchableOption: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    inlineSearch: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    tagClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    selectedOptionClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    unselectedOptionClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    optionCardClass: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    optionLabel: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    optionMap: {
        type: globalThis.PropType<(option: Option) => Option>;
        default: (option: Option) => Option;
    };
    filterMessage: {
        type: globalThis.PropType<string>;
        required: true;
        default: string;
    };
    showFilterMessage: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearableAllTag: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    deselectOptionOnClick: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
}>> & {
    onOnSearch?: ((...args: any[]) => any) | undefined;
    onOnCreate?: ((...args: any[]) => any) | undefined;
    onToggleOpen?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    placeholder: string;
    invalid: boolean;
    options: Option[];
    tag: boolean;
    createOption: boolean;
    searchableOption: boolean;
    inlineSearch: boolean;
    tagClass: string;
    selectedOptionClass: string;
    unselectedOptionClass: string;
    optionCardClass: string;
    optionLabel: string;
    optionMap: (option: Option) => Option;
    filterMessage: string;
    showFilterMessage: boolean;
    clearableAllTag: boolean;
    deselectOptionOnClick: boolean;
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
