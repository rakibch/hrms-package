interface Props {
    row?: Record<string, any>;
    isChecked?: boolean;
    isLoading?: boolean;
    selectable?: boolean;
    rowExpandable?: boolean;
}
declare function __VLS_template(): {
    default?(_: {}): any;
    expandedContent?(_: {
        row: Record<string, any>;
    }): any;
};
declare const __VLS_component: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    row: () => Record<string, any>;
    isChecked: boolean;
    isLoading: boolean;
    selectable: boolean;
    rowExpandable: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onRowClick: (payload: {
        key: string | number;
        row: Record<string, any>;
    }) => void;
    onCheckboxClick: (payload: {
        key: string | number;
        row: Record<string, any>;
        isSelected: boolean;
    }) => void;
}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    row: () => Record<string, any>;
    isChecked: boolean;
    isLoading: boolean;
    selectable: boolean;
    rowExpandable: boolean;
}>>> & {
    onOnRowClick?: ((payload: {
        key: string | number;
        row: Record<string, any>;
    }) => any) | undefined;
    onOnCheckboxClick?: ((payload: {
        key: string | number;
        row: Record<string, any>;
        isSelected: boolean;
    }) => any) | undefined;
}, {
    selectable: boolean;
    row: Record<string, any>;
    isChecked: boolean;
    rowExpandable: boolean;
    isLoading: boolean;
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
