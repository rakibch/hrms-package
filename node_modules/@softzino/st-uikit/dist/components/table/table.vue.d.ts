interface Props {
    scrollableX?: boolean;
    scrollableY?: boolean;
    width?: string;
    height?: string;
    selectable: boolean;
    isTableHeaderChecked: boolean;
    isAllTableRowSelected: boolean;
    isSearchableHeader: boolean;
    onLoadDataShow: boolean;
    initialDataCount: number;
    tableRowExpandable: boolean;
    rows?: Record<string, any>[];
    columns?: [];
    isFetchingData: boolean;
}
declare function __VLS_template(): {
    action?(_: {}): any;
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    scrollableX: boolean;
    scrollableY: boolean;
    width: string;
    height: string;
    selectable: boolean;
    isTableHeaderChecked: boolean;
    isAllTableRowSelected: boolean;
    isSearchableHeader: boolean;
    onLoadDataShow: boolean;
    initialDataCount: number;
    tableRowExpandable: boolean;
    rows: () => never[];
    columns: () => never[];
    isFetchingData: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onSearch: (value: string) => void;
    loadMoreData: (stopObserver: () => void, intersecting: boolean) => void;
}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    scrollableX: boolean;
    scrollableY: boolean;
    width: string;
    height: string;
    selectable: boolean;
    isTableHeaderChecked: boolean;
    isAllTableRowSelected: boolean;
    isSearchableHeader: boolean;
    onLoadDataShow: boolean;
    initialDataCount: number;
    tableRowExpandable: boolean;
    rows: () => never[];
    columns: () => never[];
    isFetchingData: boolean;
}>>> & {
    onOnSearch?: ((value: string) => any) | undefined;
    onLoadMoreData?: ((stopObserver: () => void, intersecting: boolean) => any) | undefined;
}, {
    height: string;
    isTableHeaderChecked: boolean;
    isAllTableRowSelected: boolean;
    selectable: boolean;
    isSearchableHeader: boolean;
    tableRowExpandable: boolean;
    width: string;
    scrollableX: boolean;
    scrollableY: boolean;
    columns: [];
    rows: Record<string, any>[];
    onLoadDataShow: boolean;
    initialDataCount: number;
    isFetchingData: boolean;
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
