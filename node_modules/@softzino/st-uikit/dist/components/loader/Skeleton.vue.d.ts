import * as heroIcons from "@heroicons/vue/24/solid";
type HeroIconName = keyof typeof heroIcons;
interface Icon {
    iconName: HeroIconName;
    class?: string;
}
interface Props {
    shape?: "rectangle" | "circle";
    size?: string;
    width?: string;
    height?: string;
    borderRadius?: string;
    animation?: "wave" | "none";
    showIcon?: boolean;
    icon?: Icon;
}
declare function __VLS_template(): {
    icon?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    shape: string;
    size: string;
    width: string;
    height: string;
    borderRadius: string;
    animation: string;
    showIcon: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    shape: string;
    size: string;
    width: string;
    height: string;
    borderRadius: string;
    animation: string;
    showIcon: boolean;
}>>>, {
    size: string;
    height: string;
    width: string;
    shape: "rectangle" | "circle";
    borderRadius: string;
    animation: "wave" | "none";
    showIcon: boolean;
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
