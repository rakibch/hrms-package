interface Filters {
    label: string;
    value: Date[];
}
declare const _default: import('vue').DefineComponent<{
    modelValue: import('vue').PropType<Date | Date[]>;
    filter: {
        type: globalThis.PropType<boolean>;
        required: true;
    };
    disabled: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    multiple: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    invalid: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    selectionMode: {
        type: globalThis.PropType<"range" | "single">;
        required: true;
        default: string;
    };
    minDate: {
        type: globalThis.PropType<Date | null>;
        required: true;
        default: null;
    };
    maxDate: {
        type: globalThis.PropType<Date | null>;
        required: true;
        default: null;
    };
    mergeFilters: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    alignRight: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    customizeFilter: {
        type: globalThis.PropType<(filters: Filters[]) => Filters[]>;
    };
}, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    apply: (selectedStartDate: Date | null, selectedEndDate: Date | null) => void;
    reset: (selectedStartDate: null, selectedEndDate: null) => void;
}, string, import('vue').PublicProps, Readonly<globalThis.ExtractPropTypes<{
    modelValue: import('vue').PropType<Date | Date[]>;
    filter: {
        type: globalThis.PropType<boolean>;
        required: true;
    };
    disabled: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    multiple: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    invalid: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    selectionMode: {
        type: globalThis.PropType<"range" | "single">;
        required: true;
        default: string;
    };
    minDate: {
        type: globalThis.PropType<Date | null>;
        required: true;
        default: null;
    };
    maxDate: {
        type: globalThis.PropType<Date | null>;
        required: true;
        default: null;
    };
    mergeFilters: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    alignRight: {
        type: globalThis.PropType<boolean>;
        required: true;
        default: boolean;
    };
    customizeFilter: {
        type: globalThis.PropType<(filters: Filters[]) => Filters[]>;
    };
}>> & {
    onReset?: ((selectedStartDate: null, selectedEndDate: null) => any) | undefined;
    onApply?: ((selectedStartDate: Date | null, selectedEndDate: Date | null) => any) | undefined;
}, {
    disabled: boolean;
    multiple: boolean;
    invalid: boolean;
    selectionMode: "single" | "range";
    minDate: Date | null;
    maxDate: Date | null;
    mergeFilters: boolean;
    alignRight: boolean;
}, {}>;
export default _default;
